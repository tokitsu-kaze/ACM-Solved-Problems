#include <bits/stdc++.h>
using namespace std;
namespace fastIO{
	#define BUF_SIZE 100000
	#define OUT_SIZE 100000
	//fread->read
	bool IOerror=0;
	//inline char nc(){char ch=getchar();if(ch==-1)IOerror=1;return ch;} 
	inline char nc(){
		static char buf[BUF_SIZE],*p1=buf+BUF_SIZE,*pend=buf+BUF_SIZE;
		if(p1==pend){
			p1=buf;pend=buf+fread(buf,1,BUF_SIZE,stdin);
			if(pend==p1){IOerror=1;return -1;}
		}
		return *p1++;
	}
	inline bool blank(char ch){return ch==' '||ch=='\n'||ch=='\r'||ch=='\t';}
	template<class T> inline bool read(T &x){
		bool sign=0;char ch=nc();x=0;
		for(;blank(ch);ch=nc());
		if(IOerror)return false;
		if(ch=='-')sign=1,ch=nc();
		for(;ch>='0'&&ch<='9';ch=nc())x=x*10+ch-'0';
		if(sign)x=-x;
		return true;
	}
	inline bool read(double &x){
		bool sign=0;char ch=nc();x=0;
		for(;blank(ch);ch=nc());
		if(IOerror)return false;
		if(ch=='-')sign=1,ch=nc();
		for(;ch>='0'&&ch<='9';ch=nc())x=x*10+ch-'0';
		if(ch=='.'){
			double tmp=1; ch=nc();
			for(;ch>='0'&&ch<='9';ch=nc())tmp/=10.0,x+=tmp*(ch-'0');
		}
		if(sign)x=-x;
		return true;
	}
	inline bool read(char *s){
		char ch=nc();
		for(;blank(ch);ch=nc());
		if(IOerror)return false;
		for(;!blank(ch)&&!IOerror;ch=nc())*s++=ch;
		*s=0;
		return true;
	}
	inline bool read(char &c){
		for(c=nc();blank(c);c=nc());
		if(IOerror){c=-1;return false;}
		return true; 
	}
	template<class T,class... U>bool read(T& h,U&... t){return read(h)&&read(t...);}
	#undef OUT_SIZE
	#undef BUF_SIZE
};
using namespace fastIO;
/************* debug begin *************/
string to_string(string s){return '"'+s+'"';}
string to_string(const char* s){return to_string((string)s);}
string to_string(const bool& b){return(b?"true":"false");}
template<class T>string to_string(T x){ostringstream sout;sout<<x;return sout.str();}
template<class A,class B>string to_string(pair<A,B> p){return "("+to_string(p.first)+", "+to_string(p.second)+")";}
template<class A>string to_string(const vector<A> v){
	int f=1;string res="{";for(const auto x:v){if(!f)res+= ", ";f=0;res+=to_string(x);}res+="}";
	return res;
}
void debug_out(){puts("");}
template<class T,class... U>void debug_out(const T& h,const U&... t){cout<<" "<<to_string(h);debug_out(t...);}
#ifdef tokitsukaze 
#define debug(...) cout<<"["<<#__VA_ARGS__<<"]:",debug_out(__VA_ARGS__);
#else
#define debug(...) 233;
#endif
/*************  debug end  *************/
#define mem(a,b) memset((a),(b),sizeof(a))
#define MP make_pair
#define pb push_back
#define fi first
#define se second
#define sz(x) (int)x.size()
#define all(x) x.begin(),x.end()
#define sqr(x) (x)*(x)
using namespace __gnu_cxx;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll,ll> PLL;
typedef pair<int,ll> PIL;
typedef pair<ll,int> PLI;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef vector<PII > VPII;
/************* define end  *************/
void read(int *x,int l,int r){for(int i=l;i<=r;i++) read(x[i]);}
void read(ll *x,int l,int r){for(int i=l;i<=r;i++) read(x[i]);}
void read(double *x,int l,int r){for(int i=l;i<=r;i++) read(x[i]);}
void println(VI x){for(int i=0;i<sz(x);i++) printf("%d%c",x[i]," \n"[i==sz(x)-1]);}
void println(VL x){for(int i=0;i<sz(x);i++) printf("%lld%c",x[i]," \n"[i==sz(x)-1]);}
void println(int *x,int l,int r){for(int i=l;i<=r;i++) printf("%d%c",x[i]," \n"[i==r]);}
void println(ll *x,int l,int r){for(int i=l;i<=r;i++) printf("%lld%c",x[i]," \n"[i==r]);}
/*************** IO end  ***************/
void go();
int main(){
	#ifdef tokitsukaze
		freopen("TEST.txt","r",stdin);
	#endif
	go();return 0;
}
const int INF=0x3f3f3f3f;
const ll LLINF=0x3f3f3f3f3f3f3f3fLL;
const double PI=acos(-1.0);
const double eps=1e-6;
const int MAX=2e5+10;
const ll mod=998244353;
/*********************************  head  *********************************/
/*
void go()
{
	int i;
	string s;
	while(cin>>s)
	{
		cout<<"\""<<s<<"\","<<endl;
	}
}
*/
void go()
{
	string mp[]={
	"0000000000000000000000000010101111110100000000000000000000000000",
	"0000000000000000000000101110101010010111110000000000000000000000",
	"0000000000000000000011101000100011010000100100000000000000000000",
	"0000000000000000011110101011111000011110101110100000000000000000",
	"0000000000000000110000001010000011110000101010110000000000000000",
	"0000000000000010011011111011101110100101100010010100000000000000",
	"0000000000000111001001000000101000111100110110110110000000000000",
	"0000000000011111101101101110111011100001100100100011100000000000",
	"0000000000111111111111000010000010001011001101101001110000000000",
	"0000000001111111111111111111101111111001111001111111111000000000",
	"0000000011111111111111111111111111111111111111111111111100000000",
	"0000000111111111111111111111111111111111111111111111111110000000",
	"0000000111111111111111111111111111111111111111111111111110000000",
	"0000001111111111111111111111111111111111111111111111111111000000",
	"0000011111111111111111111111111111111111111111111111111111100000",
	"0000011111111111111111111111111111111111111111111111111111100000",
	"0000111111111111111111111111111111111111111111111111111111110000",
	"0001111111111111111111111111111111111111111111111111111111111000",
	"0000011111111111111111111111111111111111111111111111111111111000",
	"0000000111111111111000100111111111111110001010111111111111100000",
	"0011000001111111110010001111111111111110100000001111111100000000",
	"0011110000011111000110100011111111111111101101100101100000001100",
	"0111111100000100011100111001111111111101001000110000000001111110",
	"0111111111000001001001101100011111111101101111100100001111111110",
	"0111111111111011011100000111001111111000100100001110111111111110",
	"0111111111000001000111011100011111111010111110100010010111111110",
	"1111111111110111010010010001001111110010010000110111000111111111",
	"1111111111100010010110111011101111010111011110011100010111111111",
	"1111111111101111110111100001001010000101001011110001110111111111",
	"1111111111100000100100111011100010101101101001000100100111111111",
	"1111111111110110111101101110001011100000111101011111101111111111",
	"1111111111100011100100100011101001110111100101110001000111111111",
	"1111111111111000001101110110111011000001001101100100010111111111",
	"1111111111111101101000010100001010010101101000110110111111111111",
	"1111111111110000111101010101011110110100101110011100011111111111",
	"1111111111111010010001110001111000100110000100110001111111111111",
	"1111111111111111000111000101101101101100101110100100111111111111",
	"1111111111111111110001011111100000111111100010001111111111111111",
	"0111111111111111100100001111101011111111111000100111111111111110",
	"0111111111111111111111111111111000011111111111111111111111111110",
	"0111111111111111111111111111010010111111111111111111111111111110",
	"0111111111111111111111111101000111111111111111111111111111111110",
	"0011111111111111111111111100010001111111111111111111111111111100",
	"0011111110011111111111111111110111111111111111111111111111111100",
	"0001111111010111111111111111100011111111111111111111101111111000",
	"0001111111000100011111111111001011111111111011111010000111111000",
	"0001111111010101001010001101011001010010110001100000101111111000",
	"0000111111110001100000100000001100011000000101001110111111110000",
	"0000011111110100111101111011100111000011101111101011111111100000",
	"0000011111111110100100100010111101110110100000100011111111100000",
	"0000001111111100001101101000010001010000111010001111111111000000",
	"0000000111111111011000111110110101000101100011111111111110000000",
	"0000000111111111001110010100011100010111001000111111111110000000",
	"0000000011111111100011110001110110111101111011111111111100000000",
	"0000000001111111110110000101000000100001011111111111111000000000",
	"0000000000111111111111010111101101101011001111111111110000000000",
	"0000000000011111111111110000111100001000011111111111100000000000",
	"0000000000000111111111111111111110111111111111111110000000000000",
	"0000000000000011111111111111111111111111111111111100000000000000",
	"0000000000000000111111111111111111111111111111110000000000000000",
	"0000000000000000011111111111111111111111111111100000000000000000",
	"0000000000000000000011111111111111111111111100000000000000000000",
	"0000000000000000000000111111111111111111110000000000000000000000",
	"0000000000000000000000000011111111111100000000000000000000000000"
	};
	int x,y;
	while(read(x,y))
	{
		if(mp[x][y]=='0') puts("OUT");
		else puts("IN");
	}
}
